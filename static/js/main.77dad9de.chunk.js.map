{"version":3,"sources":["RetoTwo.js","App.js","serviceWorker.js","index.js"],"names":["PersonList","useState","covidCases","setCovidCases","city","setCity","date","setDate","className","placeholder","type","value","onInput","e","target","d","onClick","axios","get","then","res","data","scope","map","index","key","edad","sexo","tipo","estado","Reto","RetoTwo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6OAwDeA,MArDf,WAAuB,IAAD,EACkBC,mBAAS,IAD3B,mBACXC,EADW,KACCC,EADD,OAEMF,mBAAS,IAFf,mBAEXG,EAFW,KAELC,EAFK,OAGMJ,mBAAS,IAHf,mBAGXK,EAHW,KAGLC,EAHK,KAWlB,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,wBAAIA,UAAU,oBAAd,qEACA,yBAAKA,UAAU,OACX,yBAAKA,UAAU,kBACX,2BAAOA,UAAU,eAAeC,YAAY,YAAYC,KAAK,OAAOC,MAAOP,EAAMQ,QAAS,SAAAC,GAAC,OAAIR,EAAQQ,EAAEC,OAAOH,WAEpH,yBAAKH,UAAU,SACX,2BAAOA,UAAU,eAAeE,KAAK,OAAOC,MAAOL,EAAMM,QAAS,SAAAG,GAAC,OAAIR,EAAQQ,EAAED,OAAOH,WAE5F,yBAAKH,UAAU,SACX,4BAAQA,UAAU,oBAAoBQ,QApB7C,WACbC,IACKC,IAAI,wEAA0Ed,EAAO,sBAAwBE,EAAO,iBACpHa,MAAK,SAACC,GACHjB,EAAciB,EAAIC,WAgBN,YAGR,2BAAOb,UAAU,wCACb,2BAAOA,UAAU,cACb,4BACI,wBAAIc,MAAM,eAAV,QACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,YAGR,+BACKpB,EAAWqB,KAAI,SAACrB,EAAYsB,GACzB,OACI,wBAAIC,IAAKD,GACL,4BAAMtB,EAAWwB,MACjB,4BAAMxB,EAAWyB,MACjB,4BAAMzB,EAAW0B,MACjB,4BAAM1B,EAAW2B,kBCjC1CC,MATf,WACE,OACE,6BAEE,kBAACC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.77dad9de.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport axios from 'axios'\r\n\r\nfunction PersonList() {\r\n    const [covidCases, setCovidCases] = useState([]);\r\n    const [city, setCity] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n    const getCovid = () => {\r\n        axios\r\n            .get(\"https://www.datos.gov.co/resource/gt2j-8ykr.json?ciudad_de_ubicaci_n=\" + city + \"&fecha_diagnostico=\" + date + \"T00:00:00.000\")\r\n            .then((res) => {\r\n                setCovidCases(res.data)\r\n            })\r\n    }\r\n    return (\r\n        <div className=\"Container\">\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <h3 className=\"my-4 text-center\">Consulta sobre pacientes con Covid-19 en el Oriente Antioque√±o</h3>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-3 offset-2\">\r\n                            <input className=\"form-control\" placeholder=\"Municipio\" type=\"text\" value={city} onInput={e => setCity(e.target.value)} />\r\n                        </div>\r\n                        <div className=\"col-3\">\r\n                            <input className=\"form-control\" type=\"date\" value={date} onInput={d => setDate(d.target.value)} />\r\n                        </div>\r\n                        <div className=\"col-3\">\r\n                            <button className=\"btn btn-secondary\" onClick={getCovid}>Search</button>\r\n                        </div>\r\n                    </div>\r\n                    <table className=\"table table-bordered table-dark mt-5\" >\r\n                        <thead className=\"thead-dark\">\r\n                            <tr>\r\n                                <th scope=\"col-3 right\">Edad</th>\r\n                                <th scope=\"col\">Sexo</th>\r\n                                <th scope=\"col\">Tipo</th>\r\n                                <th scope=\"col\">Estado</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {covidCases.map((covidCases, index) => {\r\n                                return (\r\n                                    <tr key={index}>\r\n                                        <td >{covidCases.edad}</td>\r\n                                        <td >{covidCases.sexo}</td>\r\n                                        <td >{covidCases.tipo}</td>\r\n                                        <td >{covidCases.estado}</td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n}\r\nexport default PersonList","import React, { useState } from 'react';\n// import RetoOne from \"./RetoOne.js\"\nimport RetoTwo from './RetoTwo.js';\n\nfunction Reto (){\n  return(\n    <div>\n      {/* <RetoOne/> */}\n      <RetoTwo/>\n    </div>\n  )\n}\n\nexport default Reto","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as defaultAxios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
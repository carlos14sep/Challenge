{"version":3,"sources":["components/TableToDoList.js","components/ModalNewHomeWork.js","components/ChallengeThree.js","App.js","serviceWorker.js","index.js"],"names":["ListTable","props","console","log","homeWorks","className","scope","length","map","homeWork","key","id","name","description","colSpan","NewHomeWork","useState","modal","setmodal","useForm","register","errors","handleSubmit","abrirCerrar","Button","onClick","Modal","show","Header","Title","Body","onSubmit","data","e","addHomeWork","target","reset","type","placeholder","ref","required","value","message","Todolist","setHomeWorks","ModalNewHomeWork","uuidv4","TableToDoList","Challenge","ChallengeThree","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"oOAkCeA,G,MAhCG,SAACC,GAEjB,OADAC,QAAQC,IAAIF,EAAMG,WAEhB,2BAAOC,UAAU,yCACf,2BAAOA,UAAU,cACf,4BACE,wBAAIC,MAAM,SAAV,QACA,wBAAIA,MAAM,SAAV,eACA,wBAAIA,MAAM,SAAV,aAIJ,+BACGL,EAAMG,UAAUG,OAAS,EACxBN,EAAMG,UAAUI,KAAI,SAACC,GAAD,OAClB,wBAAIC,IAAKD,EAASE,IAClB,4BAAKF,EAASG,MACd,4BAAKH,EAASI,aACd,4BAAQR,UAAU,0BAAlB,QACA,4BAAQA,UAAU,yBAAlB,cAIF,4BACE,wBAAIS,QAAS,GAAb,qC,gCC+BGC,EArDK,SAACd,GAAW,IAAD,MACHe,oBAAS,GADN,mBACtBC,EADsB,KACfC,EADe,OAEcC,cAAnCC,EAFqB,EAErBA,SAAUC,EAFW,EAEXA,OAAQC,EAFG,EAEHA,aAEpBC,EAAc,WAClBL,GAAUD,IAWZ,OACE,6BACE,kBAACO,EAAA,EAAD,CAAQnB,UAAU,2BAA2BoB,QAAS,kBAAMF,MAA5D,eAIA,kBAACG,EAAA,EAAD,CAAOC,KAAMV,GACX,kBAACS,EAAA,EAAME,OAAP,KACE,kBAACF,EAAA,EAAMG,MAAP,yCAEF,kBAACH,EAAA,EAAMI,KAAP,KACE,0BAAOzB,UAAU,GAAG0B,SAAUT,GAnBrB,SAACU,EAAMC,GACtB/B,QAAQC,IAAI6B,GACZ/B,EAAMiC,YAAYF,GAClBT,IAEAU,EAAEE,OAAOC,YAeD,yBAAK/B,UAAU,YACb,yBAAKA,UAAU,SACb,uCACA,2BAAOgC,KAAK,OAAOhC,UAAU,eAAeiC,YAAY,QAAQ1B,KAAK,OACnE2B,IAAKnB,EAAS,CAACoB,SAAU,CAACC,OAAO,EAAMC,QAAS,uBAClD,oCAAMrB,QAAN,IAAMA,GAAN,UAAMA,EAAQT,YAAd,aAAM,EAAc8B,UAEtB,yBAAKrC,UAAU,SACb,8CACA,2BAAOgC,KAAK,OAAOhC,UAAU,eAAeiC,YAAY,eAAe1B,KAAK,cAC1E2B,IAAKnB,EAAS,CAACoB,SAAU,CAACC,OAAO,EAAMC,QAAS,uBAClD,oCAAMrB,QAAN,IAAMA,GAAN,UAAMA,EAAQR,mBAAd,aAAM,EAAqB6B,WAG/B,yBAAKrC,UAAU,gBACb,4BAAQA,UAAU,0BAAlB,gBACA,4BAAQA,UAAU,eAAeoB,QAAS,kBAAMF,MAAhD,eCfCoB,MA3Bf,WACE,IADkB,EAGgB3B,mBAFjB,IADC,mBAGXZ,EAHW,KAGAwC,EAHA,KAUlB,OACE,yBAAKvC,UAAU,mBACb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,cAAd,qBACA,yBAAKA,UAAU,cACb,kBAACwC,EAAD,CAAkBX,YAVN,SAACzB,GACnBA,EAASE,GAAKmC,eACdF,EAAa,GAAD,mBAAKxC,GAAL,CAAgBK,UAW1B,6BACE,6BACE,kBAACsC,EAAD,CAAe3C,UAAWA,QCdrB4C,MARf,WACE,OACE,6BACE,kBAACC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlE,QAAQkE,MAAMA,EAAM1B,c","file":"static/js/main.4e71c794.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst ListTable = (props) => {\r\n  console.log(props.homeWorks)\r\n  return (\r\n    <table className=\"table table-bordered thead-light mt-5\">\r\n      <thead className=\"thead-dark\">\r\n        <tr>\r\n          <th scope=\"col-4\">Name</th>\r\n          <th scope=\"col-4\">Description</th>\r\n          <th scope=\"col-4\">Actions</th>\r\n          \r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {props.homeWorks.length > 0 ? (\r\n          props.homeWorks.map((homeWork) => (\r\n            <tr key={homeWork.id}>\r\n            <td>{homeWork.name}</td>\r\n            <td>{homeWork.description}</td>\r\n            <button className=\"btn btn-warning btn-md\">Edit</button>\r\n            <button className=\"btn btn-danger btn-md\">Delete</button>\r\n          </tr>\r\n          ))\r\n        ): (\r\n          <tr>\r\n            <td colSpan={3}>No hay resgistros de tareas </td>\r\n          </tr>\r\n        )}          \r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default ListTable","import React, { useState } from 'react'\r\nimport { Button, Modal } from 'react-bootstrap'\r\nimport { useForm } from 'react-hook-form'\r\n\r\nconst NewHomeWork = (props) => {\r\n  const [modal, setmodal] = useState(false)\r\n  const { register, errors, handleSubmit } = useForm()\r\n\r\n  const abrirCerrar = () => {\r\n    setmodal(!modal)\r\n  }\r\n\r\n  const onSubmit = (data, e) => {\r\n    console.log(data)\r\n    props.addHomeWork(data)\r\n    abrirCerrar()\r\n    //limpiar campos\r\n    e.target.reset()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button className=\"btn btn-secondary btn-lg\" onClick={() => abrirCerrar()}>\r\n        Crear Tarea\r\n      </Button>\r\n\r\n      <Modal show={modal}>\r\n        <Modal.Header>\r\n          <Modal.Title>Registre los campos de la tabla</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <form  className=\"\" onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"form-row\">\r\n              <div className=\"col-6\">\r\n                <label>Name</label>\r\n                <input type=\"text\" className=\"form-control\" placeholder=\" Name\" name=\"name\"\r\n                  ref={register({required: {value: true, message: 'Campo Requerido' }})} />\r\n                <div>{errors?.name?.message}</div>\r\n              </div>\r\n              <div className=\"col-6\">\r\n                <label>Description</label>\r\n                <input type=\"text\" className=\"form-control\" placeholder=\" Description\" name=\"description\"\r\n                  ref={register({required: {value: true, message: 'Campo Requerido' }})}/>\r\n                <div>{errors?.description?.message}</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n              <button className=\"btn btn-secondary my-2\">Save Changes</button>\r\n              <button className=\"btn btn-dark\" onClick={() => abrirCerrar()}>Close</button>\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NewHomeWork","import React, { useState } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport TableToDoList from '../components/TableToDoList'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport ModalNewHomeWork from '../components/ModalNewHomeWork'\r\n\r\nfunction Todolist() {\r\n  const TodoData = []\r\n\r\n  const [homeWorks, setHomeWorks] = useState(TodoData)\r\n\r\n  const addHomeWork = (homeWork) => {\r\n    homeWork.id = uuidv4()\r\n    setHomeWorks([...homeWorks, homeWork])\r\n  }\r\n\r\n  return (\r\n    <div className=\"container h-100\">\r\n      <div className=\"row\">\r\n        <h2 className=\"col-6 mt-3\">Listado de Tareas</h2>\r\n        <div className=\"col-6 mt-3\">\r\n          <ModalNewHomeWork addHomeWork={addHomeWork} />\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <div>\r\n          <TableToDoList homeWorks={homeWorks} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Todolist","import React from 'react';\r\n\r\nimport ChallengeThree from './components/ChallengeThree.js';\r\n\r\nfunction Challenge (){\r\n  return(\r\n    <div>\r\n      <ChallengeThree/>\r\n    </div>\r\n  )\r\n }\r\n\r\nexport default Challenge\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import { useForm } from 'react-hook-form';\r\n// import UserTable from ''\r\n\r\n// export default function App() {\r\n//   const { register, handleSubmit } = useForm();\r\n//   const [name, setName] = useState(\"\");\r\n//   const [description, setDescription] = useState(\"\");\r\n//   const onSubmit = data => console.log(data);\r\n\r\n//   return (\r\n\r\n//     <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n//       <input type=\"text\" placeholder=\"Nombre\" name=\"Nombre\" ref={register} value={name} onInput={e => setName(e.target.value)} />\r\n//       <input type=\"text\" placeholder=\"DescripciÃ³n\" name=\"Descripcion\" ref={register} value={description} onInput={ed => setDescription(ed.target.value)} />\r\n//       <input type=\"submit\" />\r\n//       <table className=\"table table-bordered table-dark mt-5\" >\r\n//         <body>\r\n//           <th scope=\"col-3 right\">Nombre</th>\r\n//           <th scope=\"col\">Descripcion</th>\r\n//           <tr>\r\n//             <UserTable />\r\n//           </tr>\r\n//         </body>\r\n//       </table>\r\n//     </form>\r\n//   )\r\n// }\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as defaultAxios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}